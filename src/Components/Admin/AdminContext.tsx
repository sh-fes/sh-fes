import { createContext, Dispatch, ReactNode, useContext, useReducer } from 'react';
import EventListeners from './AdminFunctions';
import { AdminReducer } from './AdminReducer';
import { InitialValue } from './InitialValue';
import { ActionType, AdminState } from './types/types';
/**
 * Do not edit this file.
 */

/** AdminState */
export const AdminStateContext = createContext<AdminState | undefined>(undefined);
export const AdminStateContextConsumer = AdminStateContext.Consumer;

/** AdminDispatch */
export type AdminDispatch = Dispatch<ActionType>;
export const AdminDispatchContext = createContext<AdminDispatch | undefined>(undefined);
export const AdminDispatchContextConsumer = AdminDispatchContext.Consumer;

/** AdminProvider */
interface AdminProviderProps {
    children?: ReactNode;
}
export const AdminProvider = ({ children }: AdminProviderProps) => {
    const [state, dispatch] = useReducer(AdminReducer, InitialValue);
    return (
        <AdminDispatchContext.Provider value={dispatch}>
            <AdminStateContext.Provider value={state}>
                {EventListeners.map((EventListener, key) => (
                    <EventListener key={key} />
                ))}
                {children}
            </AdminStateContext.Provider>
        </AdminDispatchContext.Provider>
    );
};

/** use AdminState */
export const useAdminState = (): AdminState => {
    const state = useContext(AdminStateContext);
    if (!state) throw new Error('AdminProvider not found.');
    return state;
};

/** use AdminDispatch */
export const useAdminDispatch = (): AdminDispatch => {
    const dispatch = useContext(AdminDispatchContext);
    if (!dispatch) throw new Error('AdminProvider not found.');
    return dispatch;
};
