import { createContext, Dispatch, ReactNode, useContext, useReducer } from 'react';
import EventListeners from './GlobalFunctions';
import { GlobalReducer } from './GlobalReducer';
import { InitialValue } from './InitialValue';
import { ActionType, GlobalState } from './types';
/**
 * Do not edit this file.
 */

/** GlobalState */
export const GlobalStateContext = createContext<GlobalState | undefined>(undefined);

/** GlobalDispatch */
type GlobalDispatch = Dispatch<ActionType>;
export const GlobalDispatchContext = createContext<GlobalDispatch | undefined>(undefined);

/** GlobalProvider */
interface GlobalProviderProps {
    children?: ReactNode;
}
export const GlobalProvider = ({ children }: GlobalProviderProps) => {
    const [state, dispatch] = useReducer(GlobalReducer, InitialValue);
    return (
        <GlobalDispatchContext.Provider value={dispatch}>
            <GlobalStateContext.Provider value={state}>
                {EventListeners.map((EventListener, key) => (
                    <EventListener key={key} />
                ))}
                {children}
            </GlobalStateContext.Provider>
        </GlobalDispatchContext.Provider>
    );
};

/** use GlobalState */
export const useGlobalState = (): GlobalState => {
    const state = useContext(GlobalStateContext);
    if (!state) throw new Error('GlobalProvider not found.');
    return state;
};

/** use GlobalDispatch */
export const useGlobalDispatch = (): GlobalDispatch => {
    const dispatch = useContext(GlobalDispatchContext);
    if (!dispatch) throw new Error('GlobalProvider not found.');
    return dispatch;
};
